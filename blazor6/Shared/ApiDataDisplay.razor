@using Microsoft.Identity.Web

@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IApiClient _apiClient;
@inject ILogger<ApiDataDisplay> Logger

<p>This component demonstrates fetching data from a Web API.</p>
<AuthorizeView>
    <Authorized>
        <button class="btn btn-primary" @onclick="GetDataFromApiDownstream">Click me to get from Downstream</button>
        <button class="btn btn-primary" @onclick="GetDataFromHttpClient">Click me to get from Api Client</button>
        <hr/>

        @if (apiResult == null)
        {
            <p role="status"><em>Loading...</em></p>
        }
        else
        {
            <p role="status"><h2>API Result</h2>@apiResult</p>
        }

    </Authorized>
    <NotAuthorized>
        Not Authorized
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? apiResult;

    private async Task GetDataFromApiDownstream()
    {
        try
        {
            apiResult = null;
            var data = await _apiClient.GetDataApiDownstreamAsync();
            apiResult = $"Request Time: {DateTime.Now} Data: {data}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting data from API - trying ConsentHandler");
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task GetDataFromHttpClient()
    {
        try
        {
            apiResult = null;
            var data = await _apiClient.GetDataHttpClientAsync(null);
            apiResult = $"Request Time: {DateTime.Now} Data: {data}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting data from API - trying ConsentHandler");
            ConsentHandler.HandleException(ex);
        }
    }
}
