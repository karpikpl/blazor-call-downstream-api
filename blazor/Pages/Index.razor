@page "/"
@using Microsoft.Extensions.Caching.Memory;

@inject IApiClient client;
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider _authorizationHeaderProvider;
@inject IConfiguration _configuration;
@inject IMemoryCache _memoryCache;

<PageTitle>Index</PageTitle>

<h1>Hello, @user!</h1>

Welcome to your new app.

@if (done)
{
    <p>Done!</p>
}
else
{
    <p>@loading</p>
}

@code {
    private bool done = false;
    private string loading = "Loading...";

    private string user = "Unknown";

    override protected async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User?.Identity?.IsAuthenticated == false)
        {
            // skip init
            return;
        }

        user = authState?.User?.Identity?.Name ?? "Unknown";

        try
        {
            // this is to avoid getting data twice when pre-rendering
            var data = await _memoryCache.GetOrCreateAsync<string>("data", async e =>
            {
                e.SetOptions(new MemoryCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow =
    TimeSpan.FromSeconds(30)
                    });

                var result0 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 10%";
                StateHasChanged();
                var result1 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 20%";
                StateHasChanged();
                var result2 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 30%";
                StateHasChanged();
                var result3 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 40%";
                StateHasChanged();
                var result4 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 50%";
                StateHasChanged();
                var result5 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 60%";
                StateHasChanged();
                var result6 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 70%";
                StateHasChanged();
                var result7 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 80%";
                StateHasChanged();
                var result8 = await client.GetDataApiDownstreamAsync();
                loading = "Loading... 90%";
                StateHasChanged();
                var result9 = await client.GetDataApiDownstreamAsync();

                return result9;
            });

            done = true;
            StateHasChanged();
        }
        catch (Exception msalUiRequiredException)
        {
            ConsentHandler.HandleException(msalUiRequiredException);
        }

        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }



#line default
#line hidden
#nullable disable

}
